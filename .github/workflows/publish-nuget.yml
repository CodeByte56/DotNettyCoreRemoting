name: Publish NuGet Package and GitHub Release

on:
  push:
    tags:
      - 'v*'  # 如 v1.0.0, v1.2.3-beta.1

jobs:
  # ┌────────────────────┐
  # │ 1. 提取版本信息       │
  # └────────────────────┘
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.version.outputs.package_version }}
      assembly_version: ${{ steps.version.outputs.assembly_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Version from Git Tag
        id: version
        run: |
          TAG_NAME='${{ github.ref_name }}'
          VERSION_NO_V=$(echo "$TAG_NAME" | sed 's/^v//')
          ASSEMBLY_VERSION="${VERSION_NO_V}"  # 现在使用完整版本
          
          echo "package_version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ PackageVersion: $VERSION_NO_V"
          echo "✅ AssemblyVersion: $ASSEMBLY_VERSION"
        shell: bash

  # ┌────────────────────┐
  # │ 2. 构建 & 打包        │
  # └────────────────────┘
  build-and-pack:
    needs: extract-version
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ needs.extract-version.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Pack
        run: |
          dotnet pack DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-restore \
            --include-symbols \
            -p:PackageId=DotNettyCoreRemoting \
            -p:PackageVersion=${{ needs.extract-version.outputs.package_version }} \
            -p:AssemblyVersion=${{ needs.extract-version.outputs.assembly_version }} \
            -p:FileVersion=${{ needs.extract-version.outputs.assembly_version }} \
            -p:InformationalVersion=${{ needs.extract-version.outputs.package_version }} \
            -p:RepositoryUrl=${{ github.repositoryUrl }} \
            -p:SymbolPackageFormat=snupkg \
            -o ./artifacts  # 输出到 ./artifacts

      - name: Upload Packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/         # ✅ 上传 ./artifacts/
          retention-days: 7

  # ┌─────────────────────────┐
  # │ 3. 创建 GitHub Release     │
  # └─────────────────────────┘
  create-github-release:
    needs: build-and-pack
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: success()
    steps:
      - name: Download Packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts  # ✅ 修复：下载到 ./artifacts 目录！

      - name: List Files (Debug)
        run: |
          echo "📁 Files in ./artifacts:"
          ls -la ./artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            This release includes:
            - NuGet package
            - Symbols package for debugging

            **Package ID**: \`DotNettyCoreRemoting\`
            **Version**: \`${{ needs.build-and-pack.outputs.package_version }}\`

            ⚠️ This is an official release.
          draft: false
          prerelease: ${{ contains(needs.build-and-pack.outputs.package_version, 'beta') || contains(needs.build-and-pack.outputs.package_version, 'rc') || contains(needs.build-and-pack.outputs.package_version, 'alpha') }}
          files: |
            ./artifacts/*.nupkg     # ✅ 现在路径正确了
            ./artifacts/*.snupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ┌─────────────────────────┐
  # │ 4. 发布到 NuGet.org       │
  # └─────────────────────────┘
  publish-to-nuget:
    needs: create-github-release
    runs-on: ubuntu-latest
    if: success() && !contains(needs.build-and-pack.outputs.package_version, 'beta') && !contains(needs.build-and-pack.outputs.package_version, 'rc') && !contains(needs.build-and-pack.outputs.package_version, 'alpha')
    steps:
      - name: Download Packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts  # ✅ 修复：下载到 ./artifacts 目录！

      - name: Verify Artifacts Exist
        run: |
          echo "🔍 Checking for packages in ./artifacts..."
          if [ ! -d "./artifacts" ]; then
            echo "❌ Error: Directory './artifacts' does not exist!"
            exit 1
          fi
          if [ ! -f ./artifacts/*.nupkg ]; then
            echo "❌ No .nupkg file found in ./artifacts!"
            exit 1
          else
            echo "✅ Found packages:"
            ls -la ./artifacts/
          fi

      - name: Publish to NuGet.org
        run: |
          echo "🚀 Publishing to NuGet.org: ${{ 
