name: Publish NuGet Package and GitHub Release

on:
  push:
    tags:
      - 'v*'  # 仅当打标签如 v1.0.0, v1.2.3-beta.1 时触发

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 用于创建 GitHub Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Extract Version from Git Tag
        id: version
        run: |
          TAG_NAME='${{ github.ref_name }}'
          
          # 去掉 'v' 前缀 → 得到 1.5.3 或 1.5.3-beta.1
          PACKAGE_VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          
          # 提取主.次.修订（去掉 -beta, -rc 等预发布部分）
          BASE_VERSION=$(echo "$PACKAGE_VERSION" | cut -d'-' -f1)  # 如 1.5.3
          
          # 拆分版本号
          MAJOR=$(echo "$BASE_VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$BASE_VERSION" | cut -d'.' -f2)
          PATCH=$(echo "$BASE_VERSION" | cut -d'.' -f3)
          
          # 构造 AssemblyVersion = 主.次.修订.0
          ASSEMBLY_VERSION="${MAJOR}.${MINOR}.${PATCH}.0"
          
          # 输出到后续步骤使用
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          
          # 日志输出
          echo "✅ PackageVersion (NuGet): $PACKAGE_VERSION"
          echo "✅ AssemblyVersion:        $ASSEMBLY_VERSION"
          
          # 可选：校验版本格式
          if ! [[ "$PACKAGE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ 错误：版本格式无效。请使用语义化版本，如 v1.0.0 或 v1.0.0-beta.1"
            exit 1
          fi

      - name: Create Artifacts Directory
        run: mkdir -p ./artifacts

      - name: Pack NuGet Package
        run: |
          dotnet pack DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-restore \
            --include-symbols \
            -p:PackageId=DotNettyCoreRemoting.Test \
            -p:PackageVersion=${{ steps.version.outputs.package_version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.assembly_version }} \
            -p:FileVersion=${{ steps.version.outputs.assembly_version }} \
            -p:InformationalVersion=${{ steps.version.outputs.package_version }} \
            -p:RepositoryUrl=${{ github.repositoryUrl }} \
            -p:SymbolPackageFormat=snupkg \
            -o ./artifacts

      - name: Create Bin Package (Compiled Binaries)
        run: |
          VERSION=${{ steps.version.outputs.package_version }}
          BIN_DIR="DotNettyCoreRemoting/bin/Release/net8.0"
          OUTPUT_ZIP="./artifacts/DotNettyCoreRemoting.Test.${VERSION}-bin.zip"
          
          if [ ! -d "$BIN_DIR" ]; then
            echo "❌ 编译输出目录不存在: $BIN_DIR"
            ls -la DotNettyCoreRemoting/bin/Release/ || true
            exit 1
          fi

          cd "$BIN_DIR"
          zip -r "$OUTPUT_ZIP" *.dll *.pdb *.xml *.deps.json *.runtimeconfig.json
          echo "✅ 编译产物已打包: $OUTPUT_ZIP"

      - name: List All Artifacts
        run: |
          echo "📄 生成的构建产物："
          ls -la ./artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            This release includes:
            - NuGet package for testing
            - Symbols package for debugging
            - Compiled binaries (DLLs, PDBs, XML docs)

            Package ID: `DotNettyCoreRemoting.Test`
            Version: `${{ steps.version.outputs.package_version }}`

            ⚠️ This is a **test package**, not the official release.
          draft: false
          prerelease: ${{ contains(steps.version.outputs.package_version, 'beta') || 
                         contains(steps.version.outputs.package_version, 'rc') || 
                         contains(steps.version.outputs.package_version, 'alpha') }}
          files: |
            ./artifacts/*.nupkg
            ./artifacts/*.snupkg
            ./artifacts/*-bin.zip
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet.org
        if: >-
          startsWith(github.ref, 'refs/tags/') &&
          !contains(steps.version.outputs.package_version, 'beta') &&
          !contains(steps.version.outputs.package_version, 'rc') &&
          !contains(steps.version.outputs.package_version, 'alpha')
        run: |
          echo "🚀 发布到 NuGet.org: ${{ steps.version.outputs.package_version }}"
          
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

          dotnet nuget push ./artifacts/*.snupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
