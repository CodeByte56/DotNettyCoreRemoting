name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*'  # 仅当打标签如 v1.0.0 时触发

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Extract Version
        id: version
        run: |
          # 去掉 'v' 前缀
          TAG_NAME='${{ github.ref_name }}'
          VERSION_NO_V=$(echo "$TAG_NAME" | sed 's/^v//')
          
          # 提取主版本和次版本，用于 AssemblyVersion
          # 例如: 5.9-beta.3 -> 5.9
          BASE_VERSION=$(echo "$VERSION_NO_V" | cut -d'-' -f1)
          MAJOR_MINOR=$(echo "$BASE_VERSION" | cut -d'.' -f1,2)
          
          # 构造纯数字 AssemblyVersion (x.x.0.0)
          ASSEMBLY_VERSION="${MAJOR_MINOR}.0.0"
          
          echo "package_version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          
          echo "Extracted PackageVersion: $VERSION_NO_V"
          echo "Extracted AssemblyVersion:  $ASSEMBLY_VERSION"

      - name: Build (Release)
        run: |
          dotnet build DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-restore \
            -p:PackageVersion=${{ steps.version.outputs.package_version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.assembly_version }} \
            -p:FileVersion=${{ steps.version.outputs.assembly_version }} \
            -p:InformationalVersion=${{ steps.version.outputs.package_version }}

      - name: Pack NuGet Package
        run: |
          dotnet pack DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-restore \
            --include-symbols \
            -p:PackageId=DotNettyCoreRemoting.Test \  # 临时测试包名
            -p:PackageVersion=${{ steps.version.outputs.package_version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.assembly_version }} \
            -p:RepositoryUrl=${{ github.repositoryUrl }} \
            -p:SymbolPackageFormat=snupkg \
            -o ./artifacts

      - name: Publish to NuGet.org
        run: |
          # Push main package
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

          # Push symbols package
          dotnet nuget push ./artifacts/*.snupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate