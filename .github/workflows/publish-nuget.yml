name: Publish NuGet Package and GitHub Release

on:
  push:
    tags:
      - 'v*'  # 触发整个流程

jobs:
  # ┌────────────────────┐
  # │ 1. 提取版本 & 构建  │
  # └────────────────────┘
  build:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.version.outputs.package_version }}
      assembly_version: ${{ steps.version.outputs.assembly_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Extract Version
        id: version
        run: |
          TAG_NAME='${{ github.ref_name }}'
          PACKAGE_VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          BASE_VERSION=$(echo "$PACKAGE_VERSION" | cut -d'-' -f1)
          MAJOR=$(echo "$BASE_VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$BASE_VERSION" | cut -d'.' -f2)
          PATCH=$(echo "$BASE_VERSION" | cut -d'.' -f3)
          ASSEMBLY_VERSION="${MAJOR}.${MINOR}.${PATCH}.0"

          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT

      - name: Build (No Pack)
        run: dotnet build --configuration Release --no-restore

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: DotNettyCoreRemoting/bin/Release/net8.0/

  # ┌────────────────────┐
  # │ 2. 打包（NuGet + Bin）│
  # └────────────────────┘
  pack:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ needs.build.outputs.package_version }}
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: DotNettyCoreRemoting/bin/Release/net8.0/

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Create Artifacts Dir
        run: mkdir -p ./artifacts

      - name: Pack NuGet
        run: |
          VERSION=${{ needs.build.outputs.package_version }}
          ASSEMBLY_VERSION=${{ needs.build.outputs.assembly_version }}
          dotnet pack DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-build \
            --include-symbols \
            -p:PackageId=DotNettyCoreRemoting.Test \
            -p:PackageVersion=$VERSION \
            -p:AssemblyVersion=$ASSEMBLY_VERSION \
            -p:FileVersion=$ASSEMBLY_VERSION \
            -p:InformationalVersion=$VERSION \
            -p:SymbolPackageFormat=snupkg \
            -o ./artifacts

      - name: Create Bin Zip
        run: |
          VERSION=${{ needs.build.outputs.package_version }}
          cd DotNettyCoreRemoting/bin/Release/net8.0
          zip -r "../../../../../artifacts/DotNettyCoreRemoting.Test.${VERSION}-bin.zip" *.dll *.pdb *.xml *.deps.json *.runtimeconfig.json

      - name: Upload Packages
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./artifacts/

  # ┌─────────────────────────┐
  # │ 3. 创建 GitHub Release   │
  # └─────────────────────────┘
  github_release:
    needs: pack
    runs-on: ubuntu-latest
    if: success()  # 总是执行（即使是预发布）
    permissions:
      contents: write
    steps:
      - name: Download Packages
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Compiled binaries and test NuGet packages.
            ⚠️ This is a **test package**, not the official release.
          draft: false
          prerelease: ${{ contains(needs.pack.outputs.package_version, 'beta') || contains(needs.pack.outputs.package_version, 'rc') }}
          files: |
            ./*.nupkg
            ./*.snupkg
            ./*-bin.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ┌─────────────────────────┐
  # │ 4. 发布到 NuGet.org     │
  # └─────────────────────────┘
  publish_nuget:
    needs: github_release
    runs-on: ubuntu-latest
    if: >-
      success() && 
      !contains(needs.pack.outputs.package_version, 'beta') && 
      !contains(needs.pack.outputs.package_version, 'rc') && 
      !contains(needs.pack.outputs.package_version, 'alpha')
    steps:
      - name: Download Packages
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Publish to NuGet.org
        run: |
          dotnet nuget push ./*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push ./*.snupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
