name: Publish NuGet Package and GitHub Release

on:
  push:
    tags:
      - 'v*'  # 仅当打标签如 v1.0.0, v1.2.3-beta.1 时触发

jobs:
  publish:
    runs-on: ubuntu-latest

    # ✅ 修复：正确缩进 permissions
    permissions:
      contents: write  # 允许创建 GitHub Release
      # packages: write # 如果发布到 GitHub Packages 可开启

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Extract Version
        id: version
        run: |
          # 去掉 'v' 前缀
          TAG_NAME='${{ github.ref_name }}'
          VERSION_NO_V=$(echo "$TAG_NAME" | sed 's/^v//')
          
          # 提取主版本和次版本，用于 AssemblyVersion
          BASE_VERSION=$(echo "$VERSION_NO_V" | cut -d'-' -f1)
          MAJOR_MINOR=$(echo "$BASE_VERSION" | cut -d'.' -f1,2)
          
          # 构造纯数字 AssemblyVersion (x.x.0.0)
          ASSEMBLY_VERSION="${MAJOR_MINOR}.0.0"
          
          echo "package_version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ Extracted PackageVersion: $VERSION_NO_V"
          echo "✅ Extracted AssemblyVersion: $ASSEMBLY_VERSION"

      # ✅ 确保 artifacts 目录存在
      - name: Create Artifacts Directory
        run: mkdir -p ./artifacts

      - name: Pack NuGet Package
        run: |
          dotnet pack DotNettyCoreRemoting/DotNettyCoreRemoting.csproj \
            --configuration Release \
            --no-restore \
            --include-symbols \
            -p:PackageId=DotNettyCoreRemoting.Test \
            -p:PackageVersion=${{ steps.version.outputs.package_version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.assembly_version }} \
            -p:FileVersion=${{ steps.version.outputs.assembly_version }} \
            -p:InformationalVersion=${{ steps.version.outputs.package_version }} \
            -p:RepositoryUrl=${{ github.repositoryUrl }} \
            -p:SymbolPackageFormat=snupkg \
            -o ./artifacts

      # ✅ 打包编译产物（bin/Release/net8.0）
      - name: Create Bin Package
        run: |
          VERSION=${{ steps.version.outputs.package_version }}
          BIN_DIR="DotNettyCoreRemoting/bin/Release/net8.0"
          OUTPUT_ZIP="./artifacts/DotNettyCoreRemoting.Test.${VERSION}-bin.zip"
          
          if [ ! -d "$BIN_DIR" ]; then
            echo "❌ 编译输出目录不存在: $BIN_DIR"
            ls -la DotNettyCoreRemoting/bin/Release/
            exit 1
          fi

          cd "$BIN_DIR"
          zip -r "$OUTPUT_ZIP" *.dll *.pdb *.xml *.deps.json *.runtimeconfig.json
          echo "✅ 编译产物已打包: $OUTPUT_ZIP"

      # ✅ 调试：列出所有生成的文件
      - name: List All Artifacts
        run: |
          echo "📄 所有生成的文件："
          ls -la ./artifacts/

      # ✅ 创建 GitHub Release 并上传
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            This release includes:
            - NuGet package for testing
            - Symbols package for debugging
            - Compiled binaries (DLLs, PDBs, XML docs)

            Package ID: `DotNettyCoreRemoting.Test`
            Version: `${{ steps.version.outputs.package_version }}`

            ⚠️ This is a **test package**, not the official release.
          draft: false
          prerelease: ${{ contains(steps.version.outputs.package_version, 'beta') || contains(steps.version.outputs.package_version, 'rc') || contains(steps.version.outputs.package_version, 'alpha') }}
          files: |
            ./artifacts/*.nupkg
            ./artifacts/*.snupkg
            ./artifacts/*-bin.zip
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ 发布到 NuGet.org
      - name: Publish to NuGet.org
        if: startsWith(github.ref, 'refs/tags/') && !contains(steps.version.outputs.package_version, 'beta') && !contains(steps.version.outputs.package_version, 'rc') && !contains(steps.version.outputs.package_version, 'alpha')
        run: |
          # 推送主包
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

          # 推送符号包
          dotnet nuget push ./artifacts/*.snupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
